<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Développement d'apps de bureau – Concepts liés au développement desktop</title><link>https://yostane.github.io/desktop-development/docs/features/</link><description>Recent content in Concepts liés au développement desktop on Développement d'apps de bureau</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://yostane.github.io/desktop-development/docs/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Paradigmes de programmation d'UI</title><link>https://yostane.github.io/desktop-development/docs/features/paradigmes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yostane.github.io/desktop-development/docs/features/paradigmes/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Voici exemple de programmation déclarative et impérative en TypeScript:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// typage implicite: la variable infère son type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// typage statique, on ne peut pas changer le type d&amp;#39;une variable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">//i = &amp;#34;Hello&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">items&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">34&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">44&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// const en TS empêche la réassignation (mais n&amp;#39;interdit pas la mutation)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// items = []
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// Style de programmation impératif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">resultItems&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">item&lt;/span> &lt;span style="color:#204a87;font-weight:bold">of&lt;/span> &lt;span style="color:#000">items&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">item&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">resultItems&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">item&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resultItems&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// Style déclaratif =&amp;gt; sortie = f(entrée)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// Le code va refléter ou exprimer ce qu&amp;#39;on veut faire (et pas comment le faire)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">filterdItems&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">items&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">item&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filterdItems&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">result2Items&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">filterdItems&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">item&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">result2Items&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">result3Items&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">items&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">item&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">item&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">console&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">result3Items&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>La programmation déclarative a un style qui plus orienté vers la description de ce qu&amp;rsquo;on veut faire alors que la programmation impérative décrit comment le faire&lt;/li>
&lt;li>Actuellement, la programmation impérative est généralement plus optimale que la programmation déclarative, mais ça dépend des compilateurs, des langages et du type de programme qu&amp;rsquo;on écrit.&lt;/li>
&lt;li>La programmation déclarative permet de plus facilement rendre son traitement asynchrone par sa façon de coder (c&amp;rsquo;est plus facile de rendre asynchrone les fonctions qu&amp;rsquo;on veut plutôt qu&amp;rsquo;un ensemble de code impératif)&lt;/li>
&lt;/ul>
&lt;h2 id="le-style-impératif-pour-coder-lui">Le style impératif pour coder l&amp;rsquo;UI&lt;/h2>
&lt;h2 id="le-style-déclaratif-pour-coder-lui">Le style déclaratif pour coder l&amp;rsquo;UI&lt;/h2>
&lt;ul>
&lt;li>En déclaratif, la mise à jour de l&amp;rsquo;UI se base généralement sur un &lt;strong>état&lt;/strong> qui sera &lt;strong>lié&lt;/strong> à un ou plusieurs composants graphiques. Dès que l&amp;rsquo;état change, le composant graphique met à jour son rendu. On parle alors de &lt;strong>binding&lt;/strong> ou &lt;strong>liaison&lt;/strong>.&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5c35cc;font-weight:bold">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fun&lt;/span> &lt;span style="color:#000">App&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">val&lt;/span> &lt;span style="color:#000">platformName&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">getPlatformName&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Card&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">expanded&lt;/span> &lt;span style="color:#204a87;font-weight:bold">by&lt;/span> &lt;span style="color:#000">remember&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">mutableStateOf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Column&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Modifier&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">clickable&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">expanded&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#000">expanded&lt;/span> &lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">text&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Click me !&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">style&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">MaterialTheme&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">typography&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">h2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">AnimatedVisibility&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">expanded&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">text&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello, &lt;/span>&lt;span style="color:#4e9a06">${platformName}&lt;/span>&lt;span style="color:#4e9a06"> 🎊&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">style&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">MaterialTheme&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">typography&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">h1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Programmation asynchrone</title><link>https://yostane.github.io/desktop-development/docs/features/async/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yostane.github.io/desktop-development/docs/features/async/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Tout application démarre avec un seul processus et un seul thread d&amp;rsquo;exécution. Dans une application graphique, ce thread s&amp;rsquo;appelle le thread principal ou le thread UI et c&amp;rsquo;est lui qui gère l&amp;rsquo;affichage et les interactions avec l&amp;rsquo;utilisateur.&lt;/p>
&lt;p>&lt;img src="https://yostane.github.io/desktop-development/img/ui-thread.drawio.svg" alt="">&lt;/p>
&lt;p>Si on effectue des traitements longs (calcul d&amp;rsquo;un Fibonacci ou des nombres premiers) ou bloquants (attente de la réponse d&amp;rsquo;un serveur HTTP) dans le thread principal, il sera bloqué dans la partie &lt;em>&amp;ldquo;mise à jour de l&amp;rsquo;état de l&amp;rsquo;application&amp;rdquo;&lt;/em>, causant ainsi un blocage de l&amp;rsquo;affichage et des interaction (les fameux &lt;strong>freeze&lt;/strong>).
C&amp;rsquo;est pour cela qu&amp;rsquo;on va effectuer ces traitements dans des threads.
Ces derniers permettent de lancer des traitements en même temps sans bloquer le thread UI.&lt;/p>
&lt;p>&lt;img src="https://yostane.github.io/desktop-development/img/threads.drawio.svg" alt="">&lt;/p>
&lt;p>La programmation avec les threads fait partie d&amp;rsquo;un concept plus général appelé &lt;strong>programmation asynchrone&lt;/strong>.&lt;/p>
&lt;h2 id="la-programmation-asynchrone">La programmation asynchrone&lt;/h2>
&lt;ul>
&lt;li>La programmation asynchrone consiste à exécuter plusieurs traitements en même temps (en d&amp;rsquo;autres termes, je peux lancer une fonction et passer à la suite avant qu&amp;rsquo;elle se termine).&lt;/li>
&lt;li>En programmation, on écrit du code asynchrone via différntes API selon le langage: async await, promesses, threads, Rx (observables et observers), coroutines etc.&lt;/li>
&lt;li>Beaucoup des ces API créent ce qu&amp;rsquo;on peut qualifier des Thread virtuels. Ce sont des threads gérées par le programme et non par l&amp;rsquo;OS. Ceci permet de lancer plusieurs threads virtuels au sein d&amp;rsquo;un seul thread OS (on parle aussi de thread porteur).
&lt;ul>
&lt;li>En Kotlin: les thread virtuel sont appelés &lt;strong>coroutines&lt;/strong>.&lt;/li>
&lt;li>En C#: &lt;strong>taches asynchrones&lt;/strong>&lt;/li>
&lt;li>En java: &lt;strong>Thread virtuels&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pourquoi faire des threads virtuels ? Car le coût d&amp;rsquo;un thread OS est élevé est on est limité par le nombre de thread OS qu&amp;rsquo;on peut créer à la fois.&lt;/li>
&lt;li>Cas particulier de JavaScript: un seul thread est utilisé pour faire de la programmation asynchrone (via un even Loop). On peut créer un équivalent de thread via les WebWorkers.&lt;/li>
&lt;/ul></description></item><item><title>Docs: UX et accessibilité</title><link>https://yostane.github.io/desktop-development/docs/features/ux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yostane.github.io/desktop-development/docs/features/ux/</guid><description>
&lt;h2 id="ux">UX&lt;/h2>
&lt;blockquote>
&lt;p>L&amp;rsquo;expérience utilisateur (en anglais, user experience ou UX en abrégé) est la qualité du vécu de l&amp;rsquo;utilisateur dans des environnements numériques ou physiques.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://fr.wikipedia.org/wiki/Exp%C3%A9rience_utilisateur">source wikipedia&lt;/a>&lt;/p>
&lt;h2 id="laccessibilité">L&amp;rsquo;accessibilité&lt;/h2>
&lt;blockquote>
&lt;p>L&amp;rsquo;accessibilité est la mise à disposition de vos sites web au plus grand nombre. On pense souvent que cela s&amp;rsquo;adresse aux personnes ayant un handicap, mais cela concerne également d&amp;rsquo;autres groupes comme ceux utilisant des appareils mobiles ou ceux qui ont des connexions internet de faible débit.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility">source MDN&lt;/a>&lt;/p>
&lt;h3 id="types-de-handicap-à-envisager">Types de handicap à envisager&lt;/h3>
&lt;ul>
&lt;li>Troubles de la vue&lt;/li>
&lt;li>Troubles de l&amp;rsquo;audition&lt;/li>
&lt;li>Troubles au niveau de la mobilité&lt;/li>
&lt;li>Déficiences cognitives&lt;/li>
&lt;/ul>
&lt;p>Plus de détails dans &lt;a href="https://developer.apple.com/accessibility/">le site d&amp;rsquo;Apple&lt;/a> et &lt;a href="https://developer.mozilla.org/fr/docs/Learn/Accessibility/What_is_accessibility#quel_genre_de_handicap_devons_nous_envisager">Mozilla&lt;/a>&lt;/p>
&lt;h3 id="lignes-directrices-et-législation">Lignes directrices et législation&lt;/h3>
&lt;p>Pour le web, on a le &lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/fr">WGAC de la W3C&lt;/a>.
Pour le mobile, on le &lt;a href="https://www.w3.org/WAI/standards-guidelines/mobile/">WAI de la W3C&lt;/a>.
Pour le desktop c&amp;rsquo;est un peu compliqué.&lt;/p>
&lt;p>&lt;a href="https://ec.europa.eu/social/main.jsp?catId=1202#navItem-1">European Mobile Act&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>From June 23, 2021, public sector bodies have the responsibility to make their mobile app content accessible to everyone.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://mobilea11y.com/blog/european-accessibility-act/">article de mobilea11y sur EAA&lt;/a>&lt;/p></description></item></channel></rss>
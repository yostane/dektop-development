[{"body":" Applications natives Applications hybrides (web + natif). Ex. electron, react native PWA Applications cross-platform ","categories":"","description":"","excerpt":" Applications natives Applications hybrides (web + natif). Ex. ‚Ä¶","ref":"/desktop-development/docs/","tags":"","title":"Cours"},{"body":"Programmation asynchrone Tout application d√©marre avec un seul processus et un seul thread d‚Äôex√©cution. Dans une application graphique, ce thread s‚Äôappelle le thread principal ou le thread UI et c‚Äôest lui qui g√®re l‚Äôaffichage et les interactions avec l‚Äôutilisateur.\nSi on effectue des traitements longs (calcul d‚Äôun Fibonacci ou des nombres premiers) ou bloquants (attente de la r√©ponse d‚Äôun serveur HTTP) dans le thread principal, il sera bloqu√© dans la partie ‚Äúmise √† jour de l‚Äô√©tat de l‚Äôapplication‚Äù, causant ainsi un blocage de l‚Äôaffichage et des interaction (les fameux freeze). C‚Äôest pour cela qu‚Äôon va effectuer ces traitements dans des threads. Ces derniers permettent de lancer des traitements en m√™me temps sans bloquer le thread UI.\nLa programmation avec les threads fait partie d‚Äôun concept plus g√©n√©ral appel√© programmation asynchrone.\nLa programmation asynchrone consiste √† ex√©cuter plusieurs traitements en m√™me temps (en d‚Äôautres termes, je peux lancer une fonction et passer √† la suite avant qu‚Äôelle se termine). En programmation, on √©crit du code asynchrone via diff√©rntes API selon le langage: async await, promesses, threads, Rx (observables et observers), coroutines etc. Beaucoup des ces API cr√©ent ce qu‚Äôon peut qualifier des Thread virtuels. Ce sont des threads g√©r√©es par le programme et non par l‚ÄôOS. Ceci permet de lancer plusieurs threads virtuels au sein d‚Äôun seul thread OS (on parle aussi de thread porteur). En Kotlin: les thread virtuel sont appel√©s coroutines. En C#: taches asynchrones En java: Thread virtuels Pourquoi faire des threads virtuels ? Car le co√ªt d‚Äôun thread OS est √©lev√© est on est limit√© par le nombre de thread OS qu‚Äôon peut cr√©er √† la fois. Cas particulier de JavaScript: un seul thread est utilis√© pour faire de la programmation asynchrone (via un even Loop). On peut cr√©er un √©quivalent de thread via les WebWorkers. Installeur Une fois l‚Äôapplication d√©velopp√©e, test√©e et pr√™te √† partir en production, il faudra la fournir aux utilisateurs. Plusieurs moyens s‚Äôoffrent √† nous:\nFournir une archive compress√©e Fournir une application portable: comme un dmg sur mac ou une archive auto extractable sur windows. Fournir un installeur comme Wix pour windows Mettre √† disposition sur un gestionnaire de paqu√™ts Windows: Scoop, Chocolatey ou winget Ubuntu: apt Javascript: npm Python: PyPi (pour installation avec pip). Voici un tuto Mettre √† disposition sur un magasin d‚Äôapplications (Windows store, App Store, etc.) Paradigmes de programmation Voici exemple de programmation d√©clarative et imp√©rative en TypeScript:\n// typage implicite: la variable inf√®re son type let i = 10; i = 20; // typage statique, on ne peut pas changer le type d'une variable //i = \"Hello\"; const items = [10, 34, -1, 44]; // const en TS emp√™che la r√©assignation (mais n'interdit pas la mutation) // items = [] // Style de programmation imp√©ratif const resultItems = []; for (const item of items) { if (item \u003e 0) { resultItems.push(item * 2); } } console.log(resultItems); // Style d√©claratif =\u003e sortie = f(entr√©e) // Le code va refl√©ter ou exprimer ce qu'on veut faire (et pas comment le faire) const filterdItems = items.filter((item) =\u003e item \u003e 0); console.log(filterdItems); const result2Items = filterdItems.map((item) =\u003e item * 2); console.log(result2Items); const result3Items = items.filter((item) =\u003e item \u003e 0).map((item) =\u003e item * 2); console.log(result3Items); La programmation d√©clarative a un style qui plus orient√© vers la description de ce qu‚Äôon veut faire alors que la programmation imp√©rative d√©crit comment le faire Actuellement, la programmation imp√©rative est g√©n√©ralement plus optimale que la programmation d√©clarative, mais √ßa d√©pend des compilateurs, des langages et du type de programme qu‚Äôon √©crit. La programmation d√©clarative permet de plus facilement rendre son traitement asynchrone par sa fa√ßon de coder (c‚Äôest plus facile de rendre asynchrone les fonctions qu‚Äôon veut plut√¥t qu‚Äôun ensemble de code imp√©ratif) Le style imp√©ratif pour coder l‚ÄôUI Le style d√©claratif pour coder l‚ÄôUI En d√©claratif, la mise √† jour de l‚ÄôUI se base g√©n√©ralement sur un √©tat qui sera li√© √† un ou plusieurs composants graphiques. D√®s que l‚Äô√©tat change, le composant graphique met √† jour son rendu. On parle alors de binding ou liaison. @Composable fun App() { val platformName = getPlatformName() Card { var expanded by remember { mutableStateOf(false) } Column(Modifier.clickable { expanded = !expanded }) { Text( text=\"Click me !\", style = MaterialTheme.typography.h2 ) AnimatedVisibility(expanded){ Text( text = \"Hello, ${platformName} üéä\", style = MaterialTheme.typography.h1 ) } } } } UX et accessibilit√© L‚Äôexp√©rience utilisateur (en anglais, user experience ou UX en abr√©g√©) est la qualit√© du v√©cu de l‚Äôutilisateur dans des environnements num√©riques ou physiques.\nsource wikipedia\nL‚Äôaccessibilit√© est la mise √† disposition de vos sites web au plus grand nombre. On pense souvent que cela s‚Äôadresse aux personnes ayant un handicap, mais cela concerne √©galement d‚Äôautres groupes comme ceux utilisant des appareils mobiles ou ceux qui ont des connexions internet de faible d√©bit.\nsource MDN\nTypes de handicap √† envisager Troubles de la vue Troubles de l‚Äôaudition Troubles au niveau de la mobilit√© D√©ficiences cognitives Plus de d√©tails dans le site d‚ÄôApple et Mozilla\nLignes directrices et l√©gislation Pour le web, on a le WGAC de la W3C. Pour le mobile, on le WAI de la W3C. Pour le desktop c‚Äôest un peu compliqu√©.\nEuropean Mobile Act\nFrom June 23, 2021, public sector bodies have the responsibility to make their mobile app content accessible to everyone.\narticle de mobilea11y sur EAA\n","categories":"","description":"Etudions quelques concepts\n","excerpt":"Etudions quelques concepts\n","ref":"/desktop-development/docs/features/","tags":"","title":"Concepts li√©s au d√©veloppement desktop"},{"body":"Vision globale d‚ÄôElectonJS Cr√©ation d‚Äôun projet avec Electron Forge Electron forge est un outil qui permet de simplifier les diff√©rentes actions qu‚Äôon souhaite faire sur un projet electron: d√©marrer un serveur de dev, g√©n√©rer une ex√©cutable, etc. Documentation et guide Electron Forge Electron Forge propose aussi la cr√©ation d‚Äôun projet √† partir d‚Äôun mod√®le. Cr√©ation d‚Äôun mod√®le avec vite et TS npm init electron-app@latest my-app -- --template=vite-typescript Vite vs Webpack Ce sont tous les deux des bundlers JS. Ils permettent ainsi de regrouper un projet JS contenant plusieurs fichiers (code, images, etc.) en un ensemble de fichiers r√©duit et plus optimis√©.\nWebpack est sorti avant Vite et Vite se d√©marque de Webpack par sa rapidit√©. Vite est cr√©√© par Evan You, le cr√©ateur de Vue.js\n","categories":"","description":"Framework ElectronJS\n","excerpt":"Framework ElectronJS\n","ref":"/desktop-development/docs/electronjs/","tags":"","title":"ElectronJS"},{"body":"D√©velopper une application de bureau avec un framework au choix Ce projet a deux missions principales:\nD√©velopper une application de bureau qui illustre les fonctionnalit√©s typiques d‚Äôune application de bureau avec un Framework au choix Restituer une √©tude sur le Framework utilis√© Il vous est demand√© de d√©velopper une application de bureau de type CRUD (Create, Read, Update, Delete) avec les contraintes suivantes:\nProposition d‚Äôun CRUD (4 pts) Persistance des donn√©es en local ou en ligne (4 pts) Affichage d‚Äôune liste de donn√©es (2 pts) Impl√©mentation de deux fonctionnalit√©s desktop natives (4 pts) Ic√¥ne dans la barre d‚Äô√©tat syst√®me (system tray) Service en arri√®re-plan Option pour d√©marrer automatiquement avec le syst√®me Menu contextuel (au clic droit) dialog Capture d‚Äô√©cran Compatible et fonctionnel avec au moins deux plateformes (vous pouvez utiliser WSL ou une VM) (2 pts) Publication sur un gestionnaire de paqu√™ts (scoop, chocolatey, brew, etc.) (2 pts) Cr√©ation d‚Äôun installeur qui ne n√©cessite pas les droits admin (2 pts) Restituer une √©tude sur le Framework utilis√© Il vous est demand√© de pr√©parer une pr√©sentation autour du Framework de votre choix ainsi que votre application. Voici un mod√®le de plan √† suivre:\nHistorique du framework Caract√©ristiques principales (plateformes support√©s, langages, etc.) Ce qui le diff√©rencie de la concurrence Qui l‚Äôutilise / communaut√© Principe de fonctionnement du framework Pr√©sentation de l‚Äôapplication et de ses fonctionnalit√©s D√©mo de l‚Äôapplication Evaluation et livrable L‚Äô√©valuation se base sut votre pr√©sentation qui restitue votre √©tude du Framework utilis√© ainsi qu‚Äôune d√©mo de votre application. Les pr√©sentations auront lieu durant la derni√®re s√©ance.\nIl vous est demand√© de livrer la pr√©sentation ainsi que le code source de votre projet.\nQuelques Frameworks Tauri MAUI Electron Flutter Kotlin multiplatform (KMP) + Compose multiplatform QT (en C++ ou un langage alternatif) React Native for Windows + macOS JavaFX avalonia UNO Platfrom D√©velopper une application de bureau avec ElectronJS Ce projet a deux missions principales:\nD√©velopper une application de bureau qui illustre les fonctionnalit√©s typiques d‚Äôune application de bureau avec un Framework au choix Restituer une √©tude sur le Framework utilis√© Il vous est demand√© de d√©velopper une application de bureau de type CRUD (Create, Read, Update, Delete) avec les contraintes suivantes:\nCRUD avec Firebase + UI (6 pts) Authentification avec Firebase (3 pts) Utilisation d‚Äôun crash reporter (3 pts) Impl√©mentation de 4 fonctionnalit√©s natives via le module electron (exemples: ic√¥ne dans la barre d‚Äô√©tat syst√®me (system tray), service en arri√®re-plan, Option pour d√©marrer automatiquement avec le syst√®me, Menu contextuel natif (au clic droit)) (4 pts) ‚ö† Le crash reporter n‚Äôest compt√© ici. Cr√©ation d‚Äôun installeur (2 pts) Publication sur un gestionnaire de paquets (scoop, chocolatey, brew, etc.) (2 pts) ","categories":"","description":"","excerpt":"D√©velopper une application de bureau avec un framework au choix Ce ‚Ä¶","ref":"/desktop-development/docs/projet/","tags":"","title":"Projets"},{"body":" About Goldydocs A sample site using the Docsy Hugo theme.\nGoldydocs is a sample site using the Docsy Hugo theme that shows what it can do and provides you with a template site structure. It‚Äôs designed for you to clone and edit as much as you like. See the different sections of the documentation and site for more ideas. This is another section This is another section ","categories":"","description":"","excerpt":" About Goldydocs A sample site using the Docsy Hugo theme.\nGoldydocs ‚Ä¶","ref":"/desktop-development/about/","tags":"","title":"A propos"},{"body":"","categories":"","description":"","excerpt":"","ref":"/desktop-development/categories/","tags":"","title":"Categories"},{"body":" Bienvenue au cours de d√©veloppement d'applications de bureau ! Ce cours va surtout se focaliser sur les fonctionnalit√©s in√©dites aux bureaux tels quels services. On va essayer d'√™tre le plus agnostiques au niveau du Framework.\nVoir le cours ","categories":"","description":"","excerpt":" Bienvenue au cours de d√©veloppement d'applications de bureau ! Ce ‚Ä¶","ref":"/desktop-development/","tags":"","title":"D√©veloppement d'applications de bureau"},{"body":"","categories":"","description":"","excerpt":"","ref":"/desktop-development/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/desktop-development/tags/","tags":"","title":"Tags"}]